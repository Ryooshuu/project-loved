//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "users"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: i32,
    pub username: String,
    pub country: Option<String>,
    pub banned: bool,
    pub api_fetched_at: DateTime,
    pub tokens: Json,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Username,
    Country,
    Banned,
    ApiFetchedAt,
    Tokens,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Beatmaps,
    Beatmapsets,
    RoleAssignments,
    Submissions,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::Username => ColumnType::String(StringLen::None).def(),
            Self::Country => ColumnType::Char(Some(2u32)).def().null(),
            Self::Banned => ColumnType::Boolean.def(),
            Self::ApiFetchedAt => ColumnType::DateTime.def(),
            Self::Tokens => ColumnType::Json.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Beatmaps => Entity::has_many(super::beatmaps::Entity).into(),
            Self::Beatmapsets => Entity::has_many(super::beatmapsets::Entity).into(),
            Self::RoleAssignments => Entity::has_many(super::role_assignments::Entity).into(),
            Self::Submissions => Entity::has_many(super::submissions::Entity).into(),
        }
    }
}

impl Related<super::beatmaps::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Beatmaps.def()
    }
}

impl Related<super::beatmapsets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Beatmapsets.def()
    }
}

impl Related<super::role_assignments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RoleAssignments.def()
    }
}

impl Related<super::submissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Submissions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
