//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "beatmapsets"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: i32,
    pub api_fetched_at: DateTime,
    pub artist: String,
    pub creator_id: i32,
    pub creator_name: String,
    pub deleted_at: Option<DateTime>,
    pub favorite_count: i32,
    pub play_count: i32,
    pub ranked_status: i16,
    pub submitted_at: DateTime,
    pub title: String,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    ApiFetchedAt,
    Artist,
    CreatorId,
    CreatorName,
    DeletedAt,
    FavoriteCount,
    PlayCount,
    RankedStatus,
    SubmittedAt,
    Title,
    UpdatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Beatmaps,
    Submissions,
    Users,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::ApiFetchedAt => ColumnType::DateTime.def(),
            Self::Artist => ColumnType::String(StringLen::None).def(),
            Self::CreatorId => ColumnType::Integer.def(),
            Self::CreatorName => ColumnType::String(StringLen::None).def(),
            Self::DeletedAt => ColumnType::DateTime.def().null(),
            Self::FavoriteCount => ColumnType::Integer.def(),
            Self::PlayCount => ColumnType::Integer.def(),
            Self::RankedStatus => ColumnType::SmallInteger.def(),
            Self::SubmittedAt => ColumnType::DateTime.def(),
            Self::Title => ColumnType::String(StringLen::None).def(),
            Self::UpdatedAt => ColumnType::DateTime.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Beatmaps => Entity::has_many(super::beatmaps::Entity).into(),
            Self::Submissions => Entity::has_many(super::submissions::Entity).into(),
            Self::Users => Entity::belongs_to(super::users::Entity)
                .from(Column::CreatorId)
                .to(super::users::Column::Id)
                .into(),
        }
    }
}

impl Related<super::beatmaps::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Beatmaps.def()
    }
}

impl Related<super::submissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Submissions.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
